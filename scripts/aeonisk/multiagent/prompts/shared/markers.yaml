version: 1.0.0
description: Centralized registry of all command markers used in Aeonisk YAGS multi-agent system. These markers are language-agnostic
  and should work regardless of prompt language.
dm_output_markers:
  session_control:
    description: Commands that control session lifecycle
    markers:
      SESSION_END:
        format: '[SESSION_END: VICTORY|DEFEAT|DRAW]'
        description: End the session with a specific outcome
        examples:
        - '[SESSION_END: VICTORY]'
        - '[SESSION_END: DEFEAT]'
        - '[SESSION_END: DRAW]'
        validation_pattern: \[SESSION_END:\s*(VICTORY|DEFEAT|DRAW)\]
        required_fields:
        - outcome
        notes: Must be one of three outcomes. Triggers session cleanup and debrief.
  story_progression:
    description: Commands that alter narrative flow
    markers:
      ADVANCE_STORY:
        format: '[ADVANCE_STORY: Location | Situation]'
        description: Progress story to a new location or change situation within same location
        examples:
        - '[ADVANCE_STORY: Extraction Point | Having escaped the facility, the team regroups at the safe house]'
        - '[ADVANCE_STORY: Corporate Facility - Lockdown | Alarms blare as security seals all exits]'
        - '[ADVANCE_STORY: Maintenance Tunnels | You emerge into the tunnels. Allies are regrouping ahead]'
        validation_pattern: \[ADVANCE_STORY:\s*([^|]+)\|\s*(.+?)\]
        required_fields:
        - location
        - situation
        notes: Auto-triggered when all clocks expire or can be used manually. Should introduce new clocks. Use pipe delimiter
          to separate location and situation.
  clock_management:
    description: Commands for managing progress clocks
    markers:
      NEW_CLOCK:
        format: '[NEW_CLOCK: Name | MaxTicks | Description]'
        description: Create a new progress clock
        examples:
        - '[NEW_CLOCK: Enemy Reinforcements | 8 | Corporate reinforcements approaching]'
        - '[NEW_CLOCK: Ritual Progress | 6 | Complete the binding ritual before void breakthrough]'
        - '[NEW_CLOCK: Pursuit | 10 | Security is hunting the party through the undercity]'
        validation_pattern: \[NEW_CLOCK:\s*([^|]+)\|\s*(\d+)\s*\|\s*(.+?)\]
        required_fields:
        - name
        - max_ticks
        - description
        notes: Pipe-delimited format. Name must be unique. MaxTicks typically 6-10.
      CLOCK_ADVANCE:
        format: 'üìä [Clock Name]: +X'
        description: Advance an existing clock by X ticks
        examples:
        - 'üìä [Enemy Reinforcements]: +2'
        - 'üìä [Ritual Progress]: +1'
        - 'üìä [Pursuit]: +3'
        validation_pattern: üìä\s*\[([^]]+)\]:\s*\+(\d+)
        required_fields:
        - clock_name
        - ticks
        notes: 'Use emoji prefix. Can also include reason: +2 (successful intimidation)'
  enemy_lifecycle:
    description: Commands for spawning and removing enemies
    markers:
      SPAWN_ENEMY:
        format: '[SPAWN_ENEMY: template | count | position | name_prefix]'
        description: Spawn enemies during combat
        examples:
        - '[SPAWN_ENEMY: corp_soldier | 3 | far | Soldier]'
        - '[SPAWN_ENEMY: void_cultist | 2 | near | Cultist]'
        - '[SPAWN_ENEMY: breach_spawn | 1 | far | Breach Horror]'
        validation_pattern: \[SPAWN_ENEMY:\s*([^|]+)\|\s*(\d+)\s*\|\s*(far|near)\s*\|\s*(.+?)\]
        required_fields:
        - template
        - count
        - position
        - name_prefix
        notes: Templates defined in enemy_templates.py. Position must be 'far' or 'near'.
      DESPAWN_ENEMY:
        format: '[DESPAWN_ENEMY: exact_name]'
        description: Remove an enemy from the battlefield (fled, negotiated away, etc.)
        examples:
        - '[DESPAWN_ENEMY: Soldier-1]'
        - '[DESPAWN_ENEMY: Cultist Leader]'
        validation_pattern: \[DESPAWN_ENEMY:\s*(.+?)\]
        required_fields:
        - enemy_name
        notes: Use exact enemy name. Different from defeat - enemy may return.
  character_state:
    description: Commands that modify character state
    markers:
      VOID_CHANGE:
        format: '‚ö´ Void: +/-X (reason)'
        description: Apply void corruption to character
        examples:
        - '‚ö´ Void: +1 (void ritual exposure)'
        - '‚ö´ Void: +2 (touched breach artifact)'
        - '‚ö´ Void (Kael): +1 (witnessed forbidden truth)'
        validation_pattern: ‚ö´\s*[Vv]oid(?:\s*\(([^)]+)\))?:\s*([+-]?\d+)\s*(?:\(([^)]+)\))?
        required_fields:
        - delta
        - reason
        optional_fields:
        - character_name
        notes: Can specify character in parentheses. Reason explains narrative cause.
      SOULCREDIT_CHANGE:
        format: '‚öñÔ∏è Soulcredit: +/-X (reason)'
        description: Apply soulcredit (morality/karma) change
        examples:
        - '‚öñÔ∏è Soulcredit: +2 (protected innocent bystander)'
        - '‚öñÔ∏è Soulcredit: -3 (created Hollow Seed)'
        - '‚öñÔ∏è Soulcredit (Vex): -1 (abandoned ally)'
        validation_pattern: ‚öñÔ∏è\s*[Ss]oulcredit(?:\s*\(([^)]+)\))?:\s*([+-]?\d+)\s*(?:\(([^)]+)\))?
        required_fields:
        - delta
        - reason
        optional_fields:
        - character_name
        notes: Tracks moral choices. Affects endgame outcomes and NPC reactions.
      POSITION_CHANGE:
        format: '[POSITION: far|near]'
        description: Update character tactical position
        examples:
        - '[POSITION: near]'
        - '[POSITION: far]'
        validation_pattern: \[POSITION:\s*(far|near)\]
        required_fields:
        - position
        notes: Used in combat narration to reflect movement. Must be 'far' or 'near'.
player_input_markers:
  meta_actions:
    description: Player commands that query system rather than declare actions
    markers:
      LOOKUP:
        format: 'LOOKUP: [query]'
        description: Request rules clarification or lore information from DM
        examples:
        - 'LOOKUP: [How does void corruption work mechanically?]'
        - 'LOOKUP: [What are the Kaelos Syndicate''s goals?]'
        - 'LOOKUP: [Can I use Astral Arts to sense enemies?]'
        validation_pattern: LOOKUP:\s*\[(.+?)\]
        required_fields:
        - query
        notes: Meta-action. DM responds with information, does not advance time.
  action_declaration:
    description: Structured format for declaring character actions
    markers:
      INTENT:
        format: 'INTENT: Brief goal'
        description: What the character is trying to achieve
        examples:
        - 'INTENT: Intimidate the guard into standing down'
        - 'INTENT: Hack the security terminal'
        - 'INTENT: Attack Soldier-1 with plasma blade'
        required: true
        notes: First line of action declaration. Keep concise (1 sentence).
      ATTRIBUTE:
        format: 'ATTRIBUTE: AttributeName'
        description: Which attribute is being used (Strength, Agility, etc.)
        examples:
        - 'ATTRIBUTE: Charisma'
        - 'ATTRIBUTE: Intelligence'
        - 'ATTRIBUTE: Strength'
        valid_values:
        - Strength
        - Agility
        - Endurance
        - Perception
        - Intelligence
        - Empathy
        - Willpower
        - Charisma
        - Size
        required: true
        notes: Must match canonical attribute names exactly. Case-sensitive.
      SKILL:
        format: 'SKILL: SkillName'
        description: Which skill is being used
        examples:
        - 'SKILL: Charm'
        - 'SKILL: Tech/Craft'
        - 'SKILL: Combat'
        valid_values:
        - Combat
        - Melee
        - Brawl
        - Guns
        - Athletics
        - Stealth
        - Awareness
        - Charm
        - Guile
        - Astral Arts
        - Attunement
        - Tech/Craft
        - Systems
        - Magick Theory
        - Counsel
        - Healing
        - Pilot
        - Drone Operation
        - Corporate Influence
        - Debt Law
        - Intimacy Ritual
        required: true
        notes: Use canonical skill names. See skill_mapping.py for full list and aliases.
      DIFFICULTY:
        format: 'DIFFICULTY: Easy|Moderate|Hard|Very Hard|Nearly Impossible'
        description: Player's estimate of action difficulty
        examples:
        - 'DIFFICULTY: Moderate'
        - 'DIFFICULTY: Hard'
        - 'DIFFICULTY: Nearly Impossible'
        valid_values:
        - Easy
        - Moderate
        - Hard
        - Very Hard
        - Nearly Impossible
        required: true
        notes: Helps DM calibrate DC. Not binding - DM may adjust.
      JUSTIFICATION:
        format: 'JUSTIFICATION: Brief explanation'
        description: Why this attribute/skill combination makes sense
        examples:
        - 'JUSTIFICATION: Using intimidating presence (Charisma) and social skills (Charm) to make the guard back down'
        - 'JUSTIFICATION: Intelligence-based hacking knowledge combined with Tech/Craft expertise'
        - 'JUSTIFICATION: Strength-powered melee attack with Combat skill'
        required: true
        notes: Narrative rationale for mechanical choices. Helps DM adjudicate.
      ACTION_TYPE:
        format: 'ACTION_TYPE: combat|ritual|explore|interact|custom'
        description: Category of action being taken
        examples:
        - 'ACTION_TYPE: combat'
        - 'ACTION_TYPE: ritual'
        - 'ACTION_TYPE: interact'
        valid_values:
        - combat
        - ritual
        - explore
        - interact
        - custom
        required: false
        notes: Helps session routing. Inferred if not provided.
      DESCRIPTION:
        format: 'DESCRIPTION: Narrative description'
        description: Character-voice description of the action
        examples:
        - 'DESCRIPTION: Kael steps forward, plasma blade crackling. "Stand down or get cut down. Your choice, corp-rat."'
        - 'DESCRIPTION: Vex''s fingers dance across the holo-interface, bypassing ICE protocols with practiced ease.'
        - 'DESCRIPTION: Thorn channels void energy through the ritual circle, feeling the fabric of reality warp around her.'
        required: true
        notes: Should reflect character personality and voice. Used in narrative reconstruction.
  ritual_metadata:
    description: Additional fields required for ritual actions
    markers:
      RITUAL:
        format: 'RITUAL: yes'
        description: Flag indicating this is a ritual action
        required_for_rituals: true
        notes: Triggers ritual validation. Requires Willpower + Astral Arts.
      PRIMARY_TOOL:
        format: 'PRIMARY_TOOL: tool name'
        description: Primary ritual tool being used
        examples:
        - 'PRIMARY_TOOL: Chalk circle'
        - 'PRIMARY_TOOL: Athame blade'
        - 'PRIMARY_TOOL: Scrying mirror'
        required_for_rituals: true
      OFFERING:
        format: 'OFFERING: offering description'
        description: Ritual offering (if any)
        examples:
        - 'OFFERING: Blood (1 HP)'
        - 'OFFERING: Soulcredit (-1)'
        - 'OFFERING: None'
        required_for_rituals: false
        notes: Can be 'None'. More powerful rituals often require offerings.
      COMPONENTS:
        format: 'COMPONENTS: comma-separated list'
        description: Ritual components being used
        examples:
        - 'COMPONENTS: Candles, incense, void-touched gemstone'
        - 'COMPONENTS: None'
        required_for_rituals: false
  combat_targeting:
    description: Combat-specific targeting markers
    markers:
      TARGET_ENEMY:
        format: 'TARGET_ENEMY: [exact name]'
        description: Which enemy to target with combat action
        examples:
        - 'TARGET_ENEMY: [Soldier-1]'
        - 'TARGET_ENEMY: [Cultist Leader]'
        validation_pattern: TARGET_ENEMY:\s*\[(.+?)\]
        required_fields:
        - enemy_name
        notes: Must use exact enemy name from DM narration. Use brackets.
      TARGET_POSITION:
        format: 'TARGET_POSITION: [far|near]'
        description: Which position to move to
        examples:
        - 'TARGET_POSITION: [near]'
        - 'TARGET_POSITION: [far]'
        validation_pattern: TARGET_POSITION:\s*\[(far|near)\]
        required_fields:
        - position
        notes: For movement actions. Must be 'far' or 'near'.
enemy_output_markers:
  tactical_declaration:
    description: Enemy agent action declarations
    markers:
      DEFENCE_TOKEN:
        format: 'DEFENCE_TOKEN: [PC name]'
        description: Which PC this enemy is watching/defending against
        examples:
        - 'DEFENCE_TOKEN: [Kael]'
        - 'DEFENCE_TOKEN: [Vex]'
        required: true
        notes: Affects combat modifiers. Can only watch one PC at a time.
      MAJOR_ACTION:
        format: 'MAJOR_ACTION: ATTACK|MOVE|COORDINATE|FLEE|SUPPRESS'
        description: Primary action this turn
        examples:
        - 'MAJOR_ACTION: ATTACK'
        - 'MAJOR_ACTION: MOVE'
        - 'MAJOR_ACTION: FLEE'
        valid_values:
        - ATTACK
        - MOVE
        - COORDINATE
        - FLEE
        - SUPPRESS
        - TAKE_COVER
        required: true
      TARGET:
        format: 'TARGET: [PC name or position]'
        description: Target of the major action
        examples:
        - 'TARGET: [Kael]'
        - 'TARGET: [near position]'
        required: true
        notes: 'For ATTACK: PC name. For MOVE: position.'
      WEAPON:
        format: 'WEAPON: weapon name'
        description: Which weapon to use for attack
        examples:
        - 'WEAPON: Assault Rifle'
        - 'WEAPON: Combat Knife'
        - 'WEAPON: Void Blade'
        required_for_attacks: true
      MINOR_ACTION:
        format: 'MINOR_ACTION: CLAIM_TOKEN|TAKE_COVER|RELOAD|NONE'
        description: Secondary action this turn
        examples:
        - 'MINOR_ACTION: CLAIM_TOKEN'
        - 'MINOR_ACTION: TAKE_COVER'
        - 'MINOR_ACTION: NONE'
        valid_values:
        - CLAIM_TOKEN
        - TAKE_COVER
        - RELOAD
        - NONE
        required: false
      TOKEN_TARGET:
        format: 'TOKEN_TARGET: [PC name]'
        description: 'Which PC to claim defence token for (if MINOR_ACTION: CLAIM_TOKEN)'
        examples:
        - 'TOKEN_TARGET: [Thorn]'
        required_for_claim_token: true
      TACTICAL_REASONING:
        format: 'TACTICAL_REASONING: explanation'
        description: Why this action makes tactical sense
        examples:
        - 'TACTICAL_REASONING: Kael is wounded and isolated - priority target'
        - 'TACTICAL_REASONING: Moving to far position for ranged advantage'
        required: true
        notes: Shows enemy AI decision-making. Used for debugging and training.
      SHARE_INTEL:
        format: 'SHARE_INTEL: information for allies'
        description: Information shared with allied enemies
        examples:
        - 'SHARE_INTEL: Vex has void shield active - avoid direct attack'
        - 'SHARE_INTEL: Party is low on health - press the attack'
        required: false
        notes: Enables enemy coordination and tactical communication.
parsing_notes:
  case_sensitivity: 'Marker keywords are case-insensitive (INTENT: vs intent:), but values may be case-sensitive (attribute/skill
    names)'
  whitespace: Extra whitespace around markers is ignored. Parsers should trim.
  language_agnostic: Marker keywords stay English even in non-English prompts. Narration/values can be localized.
  validation: Parsers should validate marker format and provide helpful error messages.
  fallback: If marker missing or malformed, parsers should attempt fuzzy matching or normalization (skill_mapping.py, outcome_parser.py).
  extensibility: New markers can be added. Version this file and log which version was used.
common_errors:
- error: Missing pipe delimiter in [NEW_CLOCK]
  example_wrong: '[NEW_CLOCK: Enemy Reinforcements 8 Corporate reinforcements]'
  example_correct: '[NEW_CLOCK: Enemy Reinforcements | 8 | Corporate reinforcements]'
  fix: Use pipes to separate name, max ticks, and description
- error: Incorrect attribute/skill name
  example_wrong: 'SKILL: Hacking'
  example_correct: 'SKILL: Tech/Craft'
  fix: Use canonical names. See skill_mapping.py for valid skills.
- error: Missing brackets in TARGET_ENEMY
  example_wrong: 'TARGET_ENEMY: Soldier-1'
  example_correct: 'TARGET_ENEMY: [Soldier-1]'
  fix: Enemy names must be in brackets
- error: Wrong emoji for clock advancement
  example_wrong: '‚ö´ [Enemy Reinforcements]: +2'
  example_correct: 'üìä [Enemy Reinforcements]: +2'
  fix: Use üìä for clocks, ‚ö´ for void, ‚öñÔ∏è for soulcredit
