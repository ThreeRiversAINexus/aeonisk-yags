import React from 'react';
import { useState, useEffect } from 'react';
import { CampaignPlanningWizard } from './CampaignPlanningWizard';

interface CampaignData {
  name: string;
  description: string;
  theme: string;
  factions: string[];
  npcs: any[];
  scenarios: any[];
  dreamlines: any[];
}

export function CampaignDashboard() {
  const [campaigns, setCampaigns] = useState<CampaignData[]>([]);
  const [showWizard, setShowWizard] = useState(false);
  const [editIndex, setEditIndex] = useState<number | null>(null);
  const [prefill, setPrefill] = useState<CampaignData | undefined>(undefined);

  useEffect(() => {
    const stored = localStorage.getItem('aeoniskCampaigns');
    if (stored) {
      setCampaigns(JSON.parse(stored));
    }
  }, []);

  const saveCampaigns = (newCampaigns: CampaignData[]) => {
    setCampaigns(newCampaigns);
    localStorage.setItem('aeoniskCampaigns', JSON.stringify(newCampaigns));
  };

  const handleCreate = () => {
    setPrefill(undefined);
    setEditIndex(null);
    setShowWizard(true);
  };

  const handleEdit = (idx: number) => {
    setPrefill(campaigns[idx]);
    setEditIndex(idx);
    setShowWizard(true);
  };

  const handleDelete = (idx: number) => {
    if (window.confirm('Delete this campaign?')) {
      const newCampaigns = campaigns.filter((_, i) => i !== idx);
      saveCampaigns(newCampaigns);
    }
  };

  const handleSetActive = (idx: number) => {
    const campaign = campaigns[idx];
    localStorage.setItem('aeoniskCampaign', JSON.stringify(campaign));
    window.alert(`Set '${campaign.name}' as the active campaign.`);
  };

  const handleWizardComplete = (campaign: CampaignData) => {
    let newCampaigns;
    if (editIndex !== null) {
      newCampaigns = [...campaigns];
      newCampaigns[editIndex] = campaign;
    } else {
      newCampaigns = [...campaigns, campaign];
    }
    saveCampaigns(newCampaigns);
    setShowWizard(false);
    setEditIndex(null);
    setPrefill(undefined);
  };

  const handleAISuggest = async () => {
    // Placeholder: Replace with real AI integration
    const aiCampaign: CampaignData = {
      name: 'AI Suggested Campaign',
      description: 'A mysterious campaign generated by the AI DM.',
      theme: 'Void Corruption',
      factions: ['Sovereign Nexus', 'Arcane Genetics', 'Tempest Industries'],
      npcs: [],
      scenarios: [],
      dreamlines: []
    };
    setPrefill(aiCampaign);
    setEditIndex(null);
    setShowWizard(true);
  };

  return (
    <div className="p-6">
      <div className="flex justify-between items-center mb-4">
        <h2 className="text-2xl font-bold">Campaigns</h2>
        <div className="flex gap-2">
          <button
            className="px-4 py-2 bg-blue-600 rounded hover:bg-blue-700"
            onClick={handleCreate}
          >
            New Campaign
          </button>
          <button
            className="px-4 py-2 bg-purple-600 rounded hover:bg-purple-700"
            onClick={handleAISuggest}
          >
            AI Suggest Campaign
          </button>
        </div>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {campaigns.length === 0 && (
          <div className="text-gray-400">No campaigns yet. Click "New Campaign" to get started.</div>
        )}
        {campaigns.map((c, idx) => (
          <div key={idx} className="bg-gray-800 rounded p-4 flex flex-col gap-2">
            <div className="flex justify-between items-center">
              <div>
                <h3 className="text-lg font-semibold">{c.name}</h3>
                <div className="text-sm text-gray-400">{c.theme}</div>
              </div>
              <div className="flex gap-2">
                <button className="text-blue-400 hover:underline" onClick={() => handleEdit(idx)}>Edit</button>
                <button className="text-red-400 hover:underline" onClick={() => handleDelete(idx)}>Delete</button>
                <button className="text-green-400 hover:underline" onClick={() => handleSetActive(idx)}>Set Active</button>
              </div>
            </div>
            <div className="text-sm text-gray-300 line-clamp-2">{c.description}</div>
            <div className="text-xs text-gray-500">Factions: {c.factions.join(', ')}</div>
            <div className="text-xs text-gray-500">Scenarios: {c.scenarios.length}</div>
          </div>
        ))}
      </div>
      {showWizard && (
        <CampaignPlanningWizard
          onComplete={handleWizardComplete}
          onCancel={() => setShowWizard(false)}
          prefill={prefill}
        />
      )}
    </div>
  );
} 